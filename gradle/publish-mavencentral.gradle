// Deploy system to the MavenCentral
// https://central.sonatype.org/publish/publish-guide/#deployment

// This is copy of same file from Locus API system, where is expected to be always "fresh".
// When changing, update original file there first.

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

task createSourceJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

//tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
//    pluginsMapConfiguration.set(
//            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
//    )
//}

task createJavadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

// secrets
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

// publishing
afterEvaluate {
    publishing {
        publications {
            Release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                if (project.plugins.findPlugin("com.android.library")) {
                    artifact bundleReleaseAar
                } else {
                    from components.java
                }

                // add sources & javadoc
                artifact createSourceJar
                artifact createJavadocJar

                // project metadata
                pom {
                    name = 'Logger'
                    description = 'Logger for Asamm libraries and tools.'
                    url = 'https://github.com/asamm/logger-asamm'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/asamm/logger-asamm/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'menion'
                            name = 'Jiří M. aka Menion'
                            email = 'jiri.mlavec@asamm.com'
                        }
                    }
                    scm {
                        connection = 'scm:git://github.com/asamm/logger-asamm.git'
                        developerConnection = 'scm:git:ssh://github.com/asamm/logger-asamm.git'
                        url = 'https://github.com/asamm/logger-asamm'
                    }

                    // iterate over the implementation dependencies (we don't want the test ones), adding
                    // a <dependency> node for each
                    if (project.plugins.findPlugin("com.android.library")) {
                        withXml {
                            def dependencies = asNode().appendNode('dependencies')
                            project.configurations.releaseApi.allDependencies.each {
//                        project.configurations.implementation.allDependencies.each {
                                // Ensure dependencies such as fileTree are not included.
                                if (it.name != 'unspecified') {
                                    def dependencyNode = dependencies.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "mavencentral"

                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local"
    packageGroup = PUBLISH_GROUP_ID
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}